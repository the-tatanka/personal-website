"use strict";(self.webpackChunkgithub_pages_docusaurus_template=self.webpackChunkgithub_pages_docusaurus_template||[]).push([[6104],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,m=d["".concat(l,".").concat(g)]||d[g]||p[g]||a;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},64092:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),i=["components"],s={sidebar_position:6},l="Secret Scanning",c={unversionedId:"security-toolchain/secret-scanning",id:"security-toolchain/secret-scanning",title:"Secret Scanning",description:"Automatically detect tokens or credentials that have been checked into a repository via gitleaks.",source:"@site/docs/security-toolchain/secret-scanning.md",sourceDirName:"security-toolchain",slug:"/security-toolchain/secret-scanning",permalink:"/github-pages-docusaurus-template/docs/security-toolchain/secret-scanning",editUrl:"https://github.com/the-tatanka/github-pages-docusaurus-template/tree/master/docs/security-toolchain/secret-scanning.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"projectsSidebar",previous:{title:"Dependency Scanning",permalink:"/github-pages-docusaurus-template/docs/security-toolchain/dependency-scanning"},next:{title:"Infrastructure as Code scanning",permalink:"/github-pages-docusaurus-template/docs/security-toolchain/infrastructure-as-code-scanning"}},u={},p=[{value:"Integration",id:"integration",level:2},{value:"GitHub Action",id:"github-action",level:2}],d={toc:p};function g(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"secret-scanning"},"Secret Scanning"),(0,a.kt)("p",null,"Automatically detect tokens or credentials that have been checked into a repository via gitleaks."),(0,a.kt)("b",null,"gitleaks")," is a tool for detecting and preventing hardcoded secrets like passwords, api keys, and tokens in git repos.",(0,a.kt)("p",null,"gitleaks can also be used as a pre-commit hook to prevent the secrets from being commited to the repo."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/DariuszPorowski/github-action-gitleaks/blob/main/.gitleaks/GitleaksUdmCombo.toml"},"Configuration file with Azure secrets config"))),(0,a.kt)("h2",{id:"integration"},"Integration"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Enable code scanning in your repository.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},'Create a new workflow named "gitleaks.yml" in your ".github/workflows" directory.')),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Paste the example gitleaks action below.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},'Based on which secrets are detected - false positives can be set to allowed in a custom configuration file under "allowlist" and "paths":'))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[allowlist]\ndescription = \"Allowlisted files\"\nregexes = [\n    '''ghu_InstallationUserToServer000000000000''',\n    '''ghs_InstallallationOrActionToken00000000''',\n    '''ghp_PersonalAccessToken01245678900000000'''\n]\npaths = [\n    '''.github/actions/node_modules/@octokit/auth-token/README.md''',\n    '''.github/actions/node_modules'''\n]\n")),(0,a.kt)("h2",{id:"github-action"},"GitHub Action"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of secrets analyzed,\n# or to provide custom queries or build logic.\n#\n# Example config:\n# https://github.com/DariuszPorowski/github-action-gitleaks/blob/main/.gitleaks/GitleaksUdmCombo.toml\n#\n# False positives can be set to allowed in a custom configuration file under "allowlist" and "paths".\n#\nname: gitleaks\n\non: [push, pull_request, workflow_dispatch]\n\njobs:\n  gitleaks:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: "0"\n\n      - name: Run Gitleaks\n        id: gitleaks\n        uses: DariuszPorowski/github-action-gitleaks@v2\n        with:\n          report_format: "sarif"\n          fail: true\n          # config: "/.gitleaks/GitleaksUdmCombo.toml"\n\n      - name: Get the output from the gitleaks step\n        run: |\n          echo "exitcode: ${{ steps.gitleaks.outputs.exitcode }}"\n          echo "result: ${{ steps.gitleaks.outputs.result }}"\n          echo "output: ${{ steps.gitleaks.outputs.output }}"\n          echo "command: ${{ steps.gitleaks.outputs.command }}"\n          echo "report: ${{ steps.gitleaks.outputs.report }}"\n        if: always()\n\n      - name: Upload Gitleaks output as artifact\n        uses: actions/upload-artifact@v1\n        with:\n          name: gitleaks.sarif\n          path: ${{ steps.gitleaks.outputs.report }}\n        if: always()\n\n      - name: Upload SARIF report\n        if: always()\n        # if: steps.gitleaks.outputs.exitcode == 1\n        uses: github/codeql-action/upload-sarif@v1\n        with:\n          sarif_file: ${{ steps.gitleaks.outputs.report }}\n')))}g.isMDXComponent=!0}}]);