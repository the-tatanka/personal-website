"use strict";(self.webpackChunkgithub_pages_docusaurus_template=self.webpackChunkgithub_pages_docusaurus_template||[]).push([[4630],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=u(t),f=a,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||i;return t?r.createElement(d,o(o({ref:n},l),{},{components:t})):r.createElement(d,o({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},34649:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={sidebar_position:8},c="Infrastructure as Code scanning",u={unversionedId:"security-toolchain/infrastructure-as-code-scanning",id:"security-toolchain/infrastructure-as-code-scanning",title:"Infrastructure as Code scanning",description:"KICS supports configuration files for Ansible, AWS Cloudformation, Azure Resource Manager, Dockerfile, Google Deployment Manager, Kubernetes, OpenAPI, Terraform, and Helm.",source:"@site/docs/security-toolchain/infrastructure-as-code-scanning.md",sourceDirName:"security-toolchain",slug:"/security-toolchain/infrastructure-as-code-scanning",permalink:"/personal-website/docs/security-toolchain/infrastructure-as-code-scanning",editUrl:"https://github.com/the-tatanka/personal-website/blob/master/docs/security-toolchain/infrastructure-as-code-scanning.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"projectsSidebar",previous:{title:"Secret Scanning",permalink:"/personal-website/docs/security-toolchain/secret-scanning"},next:{title:"Container Scanning",permalink:"/personal-website/docs/security-toolchain/container-scanning"}},l={},p=[{value:"Integration - KICS",id:"integration---kics",level:2},{value:"GitHub Action",id:"github-action",level:2},{value:"Integration - Trivy",id:"integration---trivy",level:2},{value:"GitHub Action",id:"github-action-1",level:2}],m={toc:p};function f(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"infrastructure-as-code-scanning"},"Infrastructure as Code scanning"),(0,i.kt)("b",null,"KICS")," supports configuration files for Ansible, AWS Cloudformation, Azure Resource Manager, Dockerfile, Google Deployment Manager, Kubernetes, OpenAPI, Terraform, and Helm.",(0,i.kt)("p",null,"Semgrep also has IaC capabilities. The corresponding Semgrep packages must be configured, see SAST Semgrep section."),(0,i.kt)("p",null,"Trivy and Checkcov can also be used."),(0,i.kt)("p",null,"Before choosing one of the tools, it should be noted that all of the listed ones identify the high findings. It is best to use a tool that is already in use (probably Trivy or Semgrep)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://kics.io/"},"KICS home"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"KICS Github action: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Checkmarx/kics-github-action"},"https://github.com/Checkmarx/kics-github-action")))),(0,i.kt)("h2",{id:"integration---kics"},"Integration - KICS"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Enable code scanning in your repository.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Create a new workflow named "kics.yml" in your ".github/workflows" directory.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Paste the example KICS action below.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'KICS must be shown the paths to IaC files to be scanned. Add them to the action under "path:".'))),(0,i.kt)("h2",{id:"github-action"},"GitHub Action"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\nname: \"KICS\"\n\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main, master ]\n    paths-ignore:\n      - '**/*.md'\n      - '**/*.txt'\n  schedule:\n    - cron: '28 15 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: KICS scan\n      uses: checkmarx/kics-github-action@v1.3\n        with:\n          # Scanning two directories: ./terraform/ ./cfn-templates/ plus a single file\n          path: 'terraform,cfn-templates,my-other-sub-folder/Dockerfile'\n          # Fail on HIGH and MEDIUM severity results\n          fail_on: high,medium\n          # when provided with a directory on output_path\n          # it will generate the specified reports file named 'results.{extension}'\n          # in this example it will generate:\n          # - results-dir/results.json\n          # - results-dir/results.sarif\n          output_path: kicsResults/\n          output_formats: 'json,sarif'\n          # If you want KICS to ignore the results and return exit status code 0 unless a KICS engine error happens\n          # ignore_on_exit: results\n          # GITHUB_TOKEN enables this github action to access github API and post comments in a pull request\n          token: ${{ secrets.GITHUB_TOKEN }}\n          enable_comments: true\n\n    # Display the results in json format\n    - name: Display kics results\n      run: |\n        cat kicsResults/results.json\n      if: always()\n\n    # Upload findings to GitHub Advanced Security Dashboard\n    - name: Upload SARIF file for GitHub Advanced Security Dashboard\n      uses: github/codeql-action/upload-sarif@v1\n      with:\n        sarif_file: kicsResults/results.sarif\n      if: always()\n")),(0,i.kt)("h2",{id:"integration---trivy"},"Integration - Trivy"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Enable code scanning in your repository.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Create a new workflow named "trivy.yml" in your ".github/workflows" directory.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Paste the example Trivy action below."))),(0,i.kt)("h2",{id:"github-action-1"},"GitHub Action"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'# Depending on the location of your Docker container\n# you need to change the path to the specific Docker registry.\n#\nname: "Trivy"\n\non:\n  push:\n    branches: [main, master]\n  # pull_request:\n  # The branches below must be a subset of the branches above\n  # branches: [ main, master ]\n  # paths-ignore:\n  #   - "**/*.md"\n  #   - "**/*.txt"\n  schedule:\n    # Once a day\n    - cron: "0 0 * * *"\n  workflow_dispatch:\n  # Trigger manually\n\njobs:\n  analyze-config:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Run Trivy vulnerability scanner in config mode\n        uses: aquasecurity/trivy-action@master\n        with:\n          scan-type: "config"\n          # ignore-unfixed: true\n          exit-code: "1"\n          hide-progress: false\n          format: "sarif"\n          output: "trivy-results.sarif"\n          severity: "CRITICAL,HIGH"\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v1\n        if: always()\n        with:\n          sarif_file: "trivy-results.sarif"\n')))}f.isMDXComponent=!0}}]);