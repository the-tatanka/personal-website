"use strict";(self.webpackChunkgithub_pages_docusaurus_template=self.webpackChunkgithub_pages_docusaurus_template||[]).push([[1262],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return y}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=u(t),y=a,d=m["".concat(c,".").concat(y)]||m[y]||p[y]||i;return t?r.createElement(d,o(o({ref:n},l),{},{components:t})):r.createElement(d,o({ref:n},l))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},91500:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return y},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={sidebar_position:8},c="Container Scanning",u={unversionedId:"security-toolchain/container-scanning",id:"security-toolchain/container-scanning",title:"Container Scanning",description:"Your application\u2019s Docker image may itself be based on Docker images that contain known vulnerabilities. By including an extra container scanning job in your pipeline that scans for those vulnerabilities",source:"@site/docs/security-toolchain/container-scanning.md",sourceDirName:"security-toolchain",slug:"/security-toolchain/container-scanning",permalink:"/github-pages-docusaurus-template/docs/security-toolchain/container-scanning",editUrl:"https://github.com/the-tatanka/github-pages-docusaurus-template/tree/master/docs/security-toolchain/container-scanning.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"projectsSidebar",previous:{title:"Infrastructure as Code scanning",permalink:"/github-pages-docusaurus-template/docs/security-toolchain/infrastructure-as-code-scanning"},next:{title:"Dashboard",permalink:"/github-pages-docusaurus-template/docs/security-toolchain/dashboard"}},l={},p=[{value:"Integration",id:"integration",level:2},{value:"GitHub Action",id:"github-action",level:2}],m={toc:p};function y(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"container-scanning"},"Container Scanning"),(0,i.kt)("p",null,"Your application\u2019s Docker image may itself be based on Docker images that contain known vulnerabilities. By including an extra container scanning job in your pipeline that scans for those vulnerabilities"),(0,i.kt)("p",null,"Container scanning is often considered part of Software Composition Analysis (SCA). SCA can contain aspects of inspecting the items your code uses. These items typically include application and system dependencies that are almost always imported from external sources, rather than sourced from items you wrote yourself."),(0,i.kt)("b",null,"Trivy")," is a simple and comprehensive scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues (IaC).",(0,i.kt)("h2",{id:"integration"},"Integration"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Enable code scanning in your repository.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Create a new workflow named "trivy.yml" in your ".github/workflows" directory.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Paste the example Trivy action below.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Configure path to your Docker image location at "image-ref:".'))),(0,i.kt)("h2",{id:"github-action"},"GitHub Action"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'# Depending on the location of your Docker container\n# you need to change the path to the specific Docker registry.\n#\nname: "Trivy"\n\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main, master]\n    paths-ignore:\n      - "**/*.md"\n      - "**/*.txt"\n  schedule:\n    - cron: "28 15 * * 3"\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # It\'s also possible to scan your private registry with Trivy\'s built-in image scan.\n      # All you have to do is set ENV vars.\n      # Docker Hub needs TRIVY_USERNAME and TRIVY_PASSWORD.\n      # You don\'t need to set ENV vars when downloading from a public repository.\n      # For public images, no ENV vars must be set.\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          # Path to Docker image\n          image-ref: "docker.io/my-organization/my-app:${{ github.sha }}"\n          format: "sarif"\n          output: "trivy-results.sarif"\n          exit-code: "1"\n          ignore-unfixed: true\n          severity: "CRITICAL,HIGH"\n        env:\n          TRIVY_USERNAME: Username\n          TRIVY_PASSWORD: Password\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v1\n        with:\n          sarif_file: "trivy-results.sarif"\n')))}y.isMDXComponent=!0}}]);